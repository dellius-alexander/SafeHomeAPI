
#############################################################################################################
# Start your application services by typing at the Docker CLI:
# ~$> docker-compose -f <"a unique name">.docker-compose.yml up -d
# Shutdown services with the Docker CLI command:
# ~$> docker-compose -f  <"a unique name">.docker-compose.yml down --remove-orphans
# The "--remove-orphans" flag is used to remove any child container instances that may have been created
# Build, remove orphaned containers and refresh services:
# ~$> docker-compose -f docker-compose.yml up --always-recreate-deps --renew-anon-volumes --remove-orphans --force-recreate -d --build
#############################################################################################################
version: '3.8'
services:
  #############################################################################
  # Backend API service
  backend:
    #    image: node:18
    build:  # project contents imported into Dockerfile at build time
      context: .
      dockerfile: ${BACKEND_DOCKERFILE}
      args:
        NODE_VERSION: ${NODE_VERSION}
        NODE_ENV: ${NODE_ENV}
        DOMAIN_BASENAME: ${DOMAIN_BASENAME}
        DOMAIN_NAME: ${DOMAIN_NAME}
        TZ: ${TZ}
        LISTEN_PORT: ${BACKEND_PORT}
        HOSTNAME: ${HOSTNAME}
        USERNAME: ${USERNAME}
        UUID: ${UUID}
    container_name: backend-api
    hostname: ${HOSTNAME} backend.${HOSTNAME}
    working_dir: ${WORKDIR}
    env_file:
      - ${BACKEND_ENV}
    expose:
      - ${BACKEND_PORT}
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    volumes:
      - ${BACKEND_VOL}
      - .devcontainer/certs/.certs:/usr/local/app/.certs
    depends_on:
      - vault
    links:
      - vault
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      backend:
  #############################################################################
  # Vault is a tool for securely accessing secrets. A secret is anything that
  # you want to tightly control access to, such as API keys, passwords, certificates,
  # and more. Vault provides a unified interface to any secret, while providing tight
  # access control and recording a detailed audit log.
  vault:
#    image: vault:1.12.2
    build:
      context: .
      dockerfile: ${VAULT_DOCKERFILE}
      args:
        VERSION: 1.12.2
    container_name: vault
    env_file:
      - ${VAULT_ENV}
    cap_add:
      - IPC_LOCK
    ports:
      - ${VAULT_API_PORT}
    depends_on:
      - mysql-server
    links:
      - mysql-server
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      backend:
  #############################################################################
#  vault-client:
##    image: vault:1.12.2
#    build:
#      context: .
#      dockerfile: ${VAULT_CLIENT_DOCKERFILE}
#      args:
#        VERSION: 1.12.2
#    container_name: vault-client
#    env_file:
#      - ${VAULT_CLIENT_ENV}
#    volumes:
#      - .devcontainer/vault/policies/:/policies/
#    depends_on:
#      - mysql-server
#    links:
#      - mysql-server
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#    networks:
#      backend:
  ###############################################################################
  mysql-server:
    image: mysql/mysql-server:8.0
    container_name: mysql-server
    volumes:
      - .devcontainer/mysql/config/:/etc/mysql/conf.d/
#      - mysql-volume:/var/lib/mysql
      - .devcontainer/mysql/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
    ports:
      - "3306:3306"
    command: ["mysqld", "--default-authentication-plugin=mysql_native_password"]
    environment:
      - MYSQL_ROOT_PASSWORD=password
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      backend:
  #############################################################################
  #  # mongodb service
  #  mongodb:
  #    #image: mongo:6.0.2
  #    build: # project contents imported into Dockerfile at build time
  #      context: .
  #      dockerfile: ${MONGODB_DOCKERFILE}
  #    container_name: mongodb
  #    restart: on-failure
  #    env_file:
  #      - ${MONGODB_ENV}
  #    volumes:
  #      - ${MONGODB_VOL}
  #      - .devcontainer/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
  #    expose:
  #      - ${MONGO_PORT}
  #    ports:
  #      - ${MONGO_PORT}:${MONGO_PORT}
  #    networks:
  #      backend:
  #    command: mongod --serviceExecutor adaptive
  #############################################################################
  #  # Email Engine
  #  email_engine:
  #    restart: always
  #    image: andris9/emailengine:latest
  #    ports:
  #      # API and web interface
  #      - '3000:3000'
  #      # SMTP for message submission
  #      - '2525:2525'
  #    depends_on:
  #      - redis
  #    links:
  #      - redis
  #    environment:
  #      # Configuration to EmailEngine can be passed via environment variables
  #      # For full list see https://github.com/postalsys/emailengine#config-mapping]
  #      # Settings to write to v1/settings on startup (https://api.emailengine.app/#operation/postV1Settings)
  #      # The following value is a YAML block scalar string, so make it sure it is properly indented
  #      # This configuration enables SMTP server for local submission
  #      EENGINE_SETTINGS: >
  #        {
  #            "smtpServerEnabled": true,
  #            "smtpServerPort": 2525,
  #            "smtpServerHost": "0.0.0.0",
  #            "smtpServerAuthEnabled": true,
  #            "smtpServerPassword": "${EENGINE_SECRET}"
  #       }
  #
  #      # Encryption secret
  #      EENGINE_SECRET: /run/secrets/eengine_secret
  #      # Database connection URL
  #      EENGINE_REDIS: 'redis://redis:6379/2'
  #    secrets:
  #      - eengine_secret
###############################################################################
# Define application network
networks:
  backend:
    driver: bridge
    ipam:
      driver: default
#  frontend:
#    driver: bridge
#    ipam:
#      driver: default
###############################################################################
# Define mongodb volume
volumes:
  vault-volume: null
#  mysql-volume: null
#  mongodb-volume: null
#  redis-volume: null
###############################################################################